dir.create("testdir2", dir.create("testdir3"))
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd("C:/Users/CurtOffice/OneDrive/School/Data Science/datasciencecoursera/testdir")
setwd(old.dir)
unlink("testdir")
unlink("testdir", recursive = true)
unlink("testdir", recursive = TRUE)
c(44, NA, 5, NA)
c(44, NA, 5, NA)
info()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_data)
sum(my_na)
my_data
0/0
inf/inf
inf / inf
Inf/Inf
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[ y > 0]
x[x>0]
x[is.na(x) & x > 0]
x[!is.na(x) & x > 0]
c(3:5)
c(3, 5, 7)
c(3, 5, 7)
c[(3, 5, 7)]
c(3, 5, 7)
x[c(3, 5, 7)]
x (i.e. x[0])
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- (foo = 11, bar = 2, norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(x)
names()
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
indentical(vect, vect2)
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gena", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(data.frame)
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 == 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
false | c(TRUE, FALSE, FALSE)
FALSE | c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE( 6 > 4)
indentical('twins', 'twins')
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(!0)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){[[x]]}, c(8, 4, 0))
evaluate(function(x){[x]}, c(8, 4, 0))
evaluate(function(x){[1]}, c(8, 4, 0))
evaluate(function(x){x+1}, c(8, 4, 0))
evaluate(function(x){x[[1]]}, c(8, 4, 0))
evaluate(function(x){x[[1]]}, c(9, 4, 0))
info()
evaluate(function(x){x[[1]]}, c(8, 4, 0))
skip()
evaluate(function(x){x[3]}, c(8, 4, 0))
skip()
?paste
paste("Programming", "is", "fun!")
submit()
telegram(Hello World)
Telegram("Hello", "World")
telegram("Hello", "World")
submit()
submit
submit()
skip()
submit()
submit()
?mad_libs
mad_libs
mad_libs(place = "London", adjustive = "beautiful", noun = "dog")
submit()
I %p% love %p% R
"I" %p% "love" %p% "R"
skip()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flags_colors <- flags [, 11:17]
flags_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
View(flags_colors)
View(flag_colors)
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, cum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, rnage)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(unique(unique_vals))
unique_vals <- lapply(flag_shapesunique(unique_vals))
unique_vals <- lapply(flag_shapes, unique(unique_vals))
unique_vals <- lapply(flag_shapes, unique(flag_shapes))
unique_vals <- lapply(unique(flag_shapes))
unique_vals <- lapply(flag_shapes, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
unique_vals <- sapply(flags, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags&landmass)
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$landmass, flags$red, summary)
tapply(flags$population, flags$landmass, flags$red, summary)
skip()
las()
ls()
class(plants)
library(swirl)
swirl()
dim(plans)
dim(plants)
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
?read.csv
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
mydf <- read.csv(file = path2csv, stringAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
skip()
-(5:20)
select-(5:20)
select(cran, -(5:20))
select(cran, -(X:size)
)
filter(cran, package == "swirl")
filter(cran, r_version =="3.1.1", country == "US")
?Comparison
filter(cran, r_version <="3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter (size > 100500, r_os == "linux-gnu")
filter(size > 100500, r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5 , NA, 10))
!is.na(c(3, 5 , NA, 10))
filter(cran, !is.na(r_version == "NA"))
filter(cran, !is.na(r_version))
select(size:ip_id)
select(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version, ip_id))
arrange(cran2, country, desc(r_version), ip_id))
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select(cran2, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran 3
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran2, size_gb = size_mb / 2^20)
mutate(cran, size_gb = size_mb / 2^20)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_gb = size_mb / 2^100)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl
)
swirl()
swirl()
swirl()
swirl()
exit()
exit
help()
exit(swirl)
library(swirl)
swirl()
library(bplyr)
library(dplyr)
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(mean(by_package))
skip()
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts -> filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
?desc
?arrange
top_counts_sorted <- arrange(top_counts, desc(counts))
?desc
top_counts_sorted <- arrange(top_counts, desc(count))
view(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0/99)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
skip()
?mutate
submit()
skip()
submit()
submit()
install.packages(c("evaluate", "formatR", "highr", "jsonlite", "manipulate", "mime", "rmarkdown"))
x <- rnorm(100)
hist(x)
scatter(x)
plot(x)
y <- rnorm(100)
plot(x, y)
z <- rnorm(100)
plot(x, z)
plot(x, y)
par(mar = c(2, 2, 2, 2))
plot(x, y)
par(mar = c(4, 4, 2, 2))
plot(x, y)
plot(x, y, pch = 2-)
plot(x, y, pch = 2)
plot(x, y, pch = 2)
plot(x, y, pch = 20)
title("Scatterplot")
text(-2, -2, "Label")
legend("topleft", legend = "Data", pch = 20)
fit <- lm(y ~ x)
abline(fit)
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(swirl)
rm(list=ls())
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
install.packages("ggplot2")
install.package("data.table")
install.packages("data.table")
install.packages("rJava")
install.packages("xlsx")
install.packages(c("jsonlite", "manipulate", "mime", "RCurl"))
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame - data.frame(x = x, y = y)
dist(dataFrame)
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
library(swirl)
swirl()
install_from_swirl("Getting and cleaning data")
install_from_swirl("Exploratory Data Analysis")
install.packages("dplyr")
install_from_swirl("Getting and Cleaning Data")
install.packages("ggplot2")
swirl()
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
mydf <- read.csv(file = path2csv, stringAsFactors = FALSE)
skip()
dim()
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
print(tbl_df)
cran
swirl()
library(swirl)
swirl()
install.from.swirl("Statistical_Inference")
install_from_swirl("Statistical_Inference")
swirl()
swirl()
swirl()
file.edit('~/.Rprofile')
library(ggplot2)
set.seed(1)
n<-40
lambda<-0.2
numsim<-2000
dataset<-matrix(rexp(n*numsim,lambda),numsim)
TheoryMean<-1/lambda
RowMeans<-apply(dataset,1,mean)
ActualMean<-mean(RowMeans)
TheorySD<-((1/lambda) * (1/sqrt(n)))
ActualSD<-sd(RowMeans)
TheoryVar<-TheorySD^2
ActualVar<-var(RowMeans)
dfRowMeans<-data.frame(RowMeans)
mp<-ggplot(dfRowMeans,aes(x=RowMeans))
mp<-mp+geom_histogram(binwidth = lambda,fill="green",color="black",aes(y = ..density..))
mp<-mp + labs(title="Density of 40 Numbers from Exponential Distribution", x="Mean of 40 Selections", y="Density")
mp<-mp + geom_vline(xintercept=ActualMean,size=1.0, color="black")
mp<-mp + stat_function(fun=dnorm,args=list(mean=ActualMean, sd=ActualSD),color = "blue", size = 1.0)
mp<-mp + geom_vline(xintercept=TheoryMean,size=1.0,color="yellow",linetype = "longdash")
mp<-mp + stat_function(fun=dnorm,args=list(mean=TheoryMean, sd=TheorySD),color = "red", size = 1.0)
mp
dfRowMeans<-data.frame(RowMeans)
mp<-ggplot(dfRowMeans,aes(x=RowMeans))
mp<-mp+geom_histogram(binwidth = lambda,fill="purple",color="black",aes(y = ..density..))
mp<-mp + labs(title="Density of 40 Numbers from Exponential Distribution", x="Mean of 40 Selections", y="Density")
mp<-mp + geom_vline(xintercept=ActualMean,size=1.0, color="black")
mp<-mp + stat_function(fun=dnorm,args=list(mean=ActualMean, sd=ActualSD),color = "blue", size = 1.0)
mp<-mp + geom_vline(xintercept=TheoryMean,size=1.0,color="yellow",linetype = "longdash")
mp<-mp + stat_function(fun=dnorm,args=list(mean=TheoryMean, sd=TheorySD),color = "red", size = 1.0)
mp
dfRowMeans<-data.frame(RowMeans)
mp<-ggplot(dfRowMeans,aes(x=RowMeans))
mp<-mp+geom_histogram(binwidth = lambda,fill="cyan",color="black",aes(y = ..density..))
mp<-mp + labs(title="Density of 40 Numbers from Exponential Distribution", x="Mean of 40 Selections", y="Density")
mp<-mp + geom_vline(xintercept=ActualMean,size=1.0, color="black")
mp<-mp + stat_function(fun=dnorm,args=list(mean=ActualMean, sd=ActualSD),color = "blue", size = 1.0)
mp<-mp + geom_vline(xintercept=TheoryMean,size=1.0,color="yellow",linetype = "longdash")
mp<-mp + stat_function(fun=dnorm,args=list(mean=TheoryMean, sd=TheorySD),color = "red", size = 1.0)
mp
library(ggplot2)
data(ToothGrowth)
str(ToothGrowth)
head(ToothGrowth)
summary(ToothGrowth)
plot(ToothGrowth)
ToothGrowth$dose<-as.factor(ToothGrowth$dose)
summary(ToothGrowth$dose)
meandose = split(ToothGrowth$len, ToothGrowth$dose)
sapply(meandose, mean)
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose)) +
xlab("Dose in miligrams") +ylab("Tooth length")
library(swirl)
swirl()
swirl()
swirl()
swirl()
install.packages("ggplot2")
swirl()
library(ggplot2)
library("ggpot2")
library("ggplot2")
install.packages("ggplot2", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
library(ggplot2)
install.packages(c("BH", "manipulate", "plyr", "scales", "testthat"))
swirl()
library(swirl)
swirl()
library(shinyapps)
library(devtools)
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
install.packages(shiny)
install.packages("shiny")
install.packages("quantmod")
library(devtools)
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifylibraries', 'ramnathv')
library(slidify)
setwd("C:/Users/Curt/SkyDrive/School/Data Science/9 Developing Data Products/Slidify")
author("Stock_Chart_DDP")
slidify('index.rmd')
library(knitr)
browseURL('index.html')
slidify('index.rmd')
slidify('index.rmd')
slidify('index.rmd')
slidify('index.rmd')
install.packages(stringr)
install.packages("stringr")
